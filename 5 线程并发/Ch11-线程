线程


# 1 线程标识

	pthread_equal() //线程比较函数
	pthread_self()

# 2 线程创建

	pthread_create()
	新创建的线程可以访问进程的地址空间，并且继承调用线程的浮点环境和信号屏蔽字，但是该线程的挂起信号集会被清除
	在创建线程时的一些竞争问题：
		1 若main线程运行结束而没有等待回收新创建出来的线程，则可能在执行线程之前进程就结束
		2 创建线程的时候将线程id放入tid，然后在新建线程中使用tid，此时新线程想获取的tid可能还没等到create结束写入tid，所以应该使用pthread_self


# 3 进程终止

	如果进程中的任意线程调用了 exit，_exit, _Exit,则整个进程终止

	3种退出方式：
		1  线程可以从例程中返回。返回值是线程的退出码
		2  线程可以被同一进程中的其他线程取消
		3  线程调用pthread_exit

	pthread_exit()

	pthread_join() //阻塞直到有线程返回或取消

	pthread_cancel()


	pthread_cleanup_push()
	pthread_cleanup_pop() // 参数设为0则cleanup不调用
	必须在与线程相同的作用域中以匹配对的形式使用
	注意，如果是放在pthread_exit之后，不管是否参数为0都调用

	pthread_detach()


# 4 线程同步

	变量增量操作：
		存储单元读入寄存器-》在寄存器中做增量操作-》将新值写回内存
	

## 4.1 互斥量

	pthread_mutex_t
	pthread_mutex_init()
	pthread_mutex_destroy()
	
	pthread_mutex_lock()
	pthread_mutex_trylock()	
	pthread_mutex_unlock()

## 4.2 避免死锁

## 4.3 pthread_mutex_timedlock()
	线程师徒获取一个已加锁的互斥量时，timelock允许绑定线程阻塞时间，但设置超时

## 4.4 读写锁 （适合对读的次数大于写的情况）
	共享互斥锁
	1 写锁加锁状态：在解锁之前，所有试图对该锁加锁的线程都会被阻塞
	2 读锁加锁状态：所有试图已读模式对它进行加锁的线程都可以得到访问权限，已写模式进行加锁的线程阻塞，直到所有线程释放他们的读锁为止
	3 当读写锁处于读模式锁的状态，有一个线程试图以写模式取锁，读写锁通常阻塞随后的读模式锁请求
	
	pthread_rwlock_init()
	pthread_rwlock_destroy()

	pthread_rwlock_rdlock()
	pthread_rwlock_wrlock()
	pthread_rwlock_unlock()

	pthread_rwlock_timedrdlock // 带有超时的读写锁
	pthread_rwlock_timedwrlock



## 4.5 条件变量
	一种同步机制，条件变量给多个线程提供了一个会和的场所
	-》条件变量与互斥量一起使用 允许线程以无竞争方式等待特定条件发生

	获取时间：gettimeofday


## 4.6 自旋锁
	
	线程休眠：主动让出时间片，让时间片会导致OS切换到另一个线程，一次切换10μs
	线程忙等：消耗CPU，一直在轮训某个变量直到符合条件
	线程阻塞：不消耗CPU

	自旋锁适用于：锁被持有时间短，且线程不希望在重新调度上花费太多成本
	

## 4.7 屏障
	
	用户协调多个线程并行工作的同步机制
